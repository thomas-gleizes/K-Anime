generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anime {
  id               Int          @id @default(autoincrement())
  kitsu_id         Int?         @unique
  slug             String       @unique
  canonical_title  String
  titles           String?      @db.LongText
  synopsis         String?      @db.Text
  description      String?      @db.Text
  season           AnimeSeason?
  season_year      String?      @db.VarChar(4)
  date_begin       DateTime?    @db.Date
  date_end         DateTime?    @db.Date
  rating_average   Float?       @db.Float
  rating_rank      Int?         @db.UnsignedInt
  popularity_count Int?         @db.UnsignedInt
  popularity_rank  Int?         @db.UnsignedInt
  type             AnimeType?
  poster           String?      @db.LongText
  cover            String?      @db.LongText
  episode_count    Int?         @db.UnsignedInt
  episode_length   Int?         @db.UnsignedInt
  status           AnimeStatus  @default(unreleased)
  saga_id          Int?
  created_at       DateTime     @default(now()) @db.Timestamp(0)
  updated_at       DateTime     @default(now()) @db.Timestamp(0)

  entries    Entry[]
  posts      Post[]
  saga       Saga?           @relation(fields: [saga_id], references: [id])
  categories AnimeCategory[]
  import     AnimeImport?

  @@index([canonical_title], map: "animes_canonical_title_index")
  @@map("animes")
}

model Saga {
  id              Int      @id @default(autoincrement())
  slug            String   @unique
  canonical_title String
  titles          String?  @db.LongText
  description     String?  @db.Text
  created_at      DateTime @default(now()) @db.Timestamp(0)
  updated_at      DateTime @default(now()) @db.Timestamp(0)

  animes Anime[]

  @@map("sagas")
}

model Category {
  id                Int      @id @default(autoincrement())
  name              String
  slug              String   @unique
  description       String?  @db.Text
  total_media_count Int      @default(0) @db.SmallInt
  created_at        DateTime @default(now()) @db.Timestamp(0)
  updated_at        DateTime @default(now()) @db.Timestamp(0)

  animes AnimeCategory[]

  @@map("categories")
}

model AnimeCategory {
  anime_id    Int
  category_id Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)

  animes   Anime    @relation(fields: [anime_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])

  @@id([anime_id, category_id])
  @@map("animes_categories")
}

model User {
  id                      Int        @id @default(autoincrement())
  username                String     @unique
  slug                    String     @unique
  email                   String     @unique
  password                String
  avatar_path             String?
  background_path         String?
  bio                     String?    @db.Text
  birthday                DateTime?  @db.Date
  gender                  Gender     @default(Secret)
  city                    String?
  country_id              Int?
  real_email              String     @unique
  email_verified          Boolean    @default(false)
  reset_password_token    String?    @db.VarChar(255)
  last_ask_reset_password DateTime?
  last_reset_password     DateTime   @default(now())
  follow_count            Int        @default(0) @db.UnsignedSmallInt
  follower_count          Int        @default(0) @db.UnsignedSmallInt
  visibility              Visibility @default(public)
  is_admin                Boolean    @default(false)
  created_at              DateTime   @default(now()) @db.Timestamp(0)
  updated_at              DateTime   @default(now()) @db.Timestamp(0)

  animes    Entry[]
  posts     Post[]
  follows   UserFollow[] @relation("follows")
  followers UserFollow[] @relation("followers")
  country   Country?     @relation(fields: [country_id], references: [id])
  Log       Log[]

  @@map("users")
}

model Entry {
  anime_id   Int
  user_id    Int
  status     EntryStatus @default(Wanted)
  rating     Float?
  progress   Int         @default(0) @db.SmallInt
  favorite   Boolean     @default(false)
  started_at DateTime?   @db.Date
  finish_at  DateTime?   @db.Date
  note       String?     @db.MediumText
  visibility Visibility  @default(public)
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @default(now()) @db.Timestamp(0)

  anime Anime @relation(fields: [anime_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@id([anime_id, user_id])
  @@map("entries")
}

model Post {
  id          Int      @id @default(autoincrement())
  content     String   @db.Text
  attachments String?  @db.Text
  anime_id    Int
  user_id     Int
  parent_id   Int?
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @db.Timestamp(0)

  anime   Anime  @relation(fields: [anime_id], references: [id])
  user    User   @relation(fields: [user_id], references: [id])
  replyTo Post?  @relation("parent", fields: [parent_id], references: [id])
  replies Post[] @relation("parent")

  @@map("posts")
}

model UserFollow {
  follower_id Int
  follow_id   Int
  created_at  DateTime @default(now()) @db.Timestamp(0)

  follower User @relation("follows", fields: [follower_id], references: [id])
  follow   User @relation("followers", fields: [follow_id], references: [id])

  @@id([follower_id, follow_id])
  @@map("users_follows")
}

model Country {
  id       Int     @id @default(autoincrement())
  iso      String  @db.Char(2)
  iso3     String? @db.VarChar(3)
  name     String  @db.VarChar(80)
  nicename String  @db.VarChar(80)

  users    User[]

  @@map("countries")
}

model Log {
  id         Int      @id @default(autoincrement())
  path       String
  method     Method
  user_id    Int?
  ip         String   @db.VarChar(64)
  params     String?  @db.Text
  body       String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)

  user User? @relation(fields: [user_id], references: [id])

  @@map("logs")
}

model EventLog {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(64)
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@map("event_logs")
}

model AnimeImport {
  id               Int       @id @default(autoincrement())
  anime_id         Int?      @unique
  kitsu_id         Int
  slug             String
  canonical_title  String
  titles           String?   @db.LongText
  synopsis         String?   @db.Text
  description      String?   @db.Text
  date_begin       DateTime? @db.Date
  date_end         DateTime? @db.Date
  rating_average   Float?
  rating_rank      Int?      @db.UnsignedInt
  popularity_count Float?
  popularity_rank  Int?      @db.UnsignedInt
  type             String?
  poster           String?   @db.LongText
  cover            String?   @db.LongText
  episode_count    Int?      @db.UnsignedInt
  episode_length   Int?      @db.UnsignedInt
  status           String?
  import_at        DateTime  @default(now()) @db.Timestamp(0)

  anime       Anime?      @relation(fields: [anime_id], references: [id])
  saga_import SagaImport?

  @@map("import_animes")
}

model SagaImport {
  id        Int      @id @default(autoincrement())
  import_id Int      @unique
  details   String   @db.LongText
  treat     Boolean
  import_at DateTime @default(now()) @db.Timestamp(0)

  import AnimeImport @relation(fields: [import_id], references: [id])

  @@map("import_sagas")
}

enum AnimeSeason {
  Winter
  Springs
  Summer
  Fall
}

enum AnimeType {
  TV
  movie
  OAV
  ONA
  OVA
  special
  music
}

enum AnimeStatus {
  finished
  current
  unreleased
  tba
  upcoming
}

enum EntryStatus {
  Wanted
  Watching
  Completed
  OnHold
  Dropped
}

enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum Gender {
  Male
  Female
  Secret
}

enum Visibility {
  private
  public
  limited
}
