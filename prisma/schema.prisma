generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anime {
  id               Int             @id @default(autoincrement())
  kitsu_id         String?         @unique
  slug             String          @unique
  canonical_title  String
  titles           String?         @db.LongText
  synopsis         String?         @db.Text
  description      String?         @db.Text
  season           AnimeSeason?
  season_year      String?         @db.VarChar(4)
  date_begin       DateTime?       @db.Date
  date_end         DateTime?       @db.Date
  rating_average   Float?
  rating_rank      Int?            @db.UnsignedInt
  popularity_count Float?
  popularity_rank  Int?            @db.UnsignedInt
  type             AnimeType?
  poster           String?         @db.LongText
  cover            String?         @db.LongText
  episode_count    Int?            @db.UnsignedInt
  episode_length   Int?            @db.UnsignedInt
  status           AnimeStatus     @default(unreleased)
  created_at       DateTime        @default(now()) @db.Timestamp(0)
  users            AnimeUser[]
  categories       AnimeCategory[]

  @@index([canonical_title], map: "animes_canonical_title_index")
  @@map("animes")
}

model Category {
  id                Int             @id @default(autoincrement())
  name              String
  slug              String          @unique
  description       String?         @db.Text
  total_media_count Int             @default(0) @db.SmallInt
  created_at        DateTime        @default(now()) @db.Timestamp(0)
  updated_at        DateTime        @default(now()) @db.Timestamp(0)
  animes            AnimeCategory[]

  @@map("categories")
}

model AnimeCategory {
  anime_id    Int
  category_id Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  animes      Anime    @relation(fields: [anime_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@id([anime_id, category_id])
  @@map("animes_categories")
}

model User {
  id              Int          @id @default(autoincrement())
  email           String       @unique
  password        String
  login           String       @unique
  avatar_path     String?
  background_path String?
  bio             String?      @db.Text
  birthday        DateTime?    @db.Date
  gender          Gender       @default(Secret)
  city            String?
  country_id      Int?
  follow_count    Int          @default(0) @db.UnsignedSmallInt
  follower_count  Int          @default(0) @db.UnsignedSmallInt
  is_admin        Boolean      @default(false)
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime     @default(now()) @db.Timestamp(0)
  animes          AnimeUser[]
  follow          UserFollow[] @relation("follow")
  followers       UserFollow[] @relation("followers")
  country         Country?     @relation(fields: [country_id], references: [id])

  @@map("users")
}

model AnimeUser {
  anime_id   Int
  user_id    Int
  status     AnimeUserStatus @default(Wanted)
  created_at DateTime        @default(now()) @db.Timestamp(0)
  updated_at DateTime        @default(now()) @db.Timestamp(0)
  animes     Anime           @relation(fields: [anime_id], references: [id])
  user       User            @relation(fields: [user_id], references: [id])

  @@id([anime_id, user_id])
  @@index([user_id], map: "animes_users_user_id_fkey")
  @@map("animes_users")
}

model UserFollow {
  follower_id Int
  follow_id   Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  followers   User     @relation("follow", fields: [follower_id], references: [id])
  follow      User     @relation("followers", fields: [follow_id], references: [id])

  @@id([follower_id, follow_id])
  @@map("users_follow")
}

model Country {
  id       Int     @id @default(autoincrement())
  iso      String  @db.Char(2)
  iso3     String? @db.VarChar(3)
  name     String  @db.VarChar(80)
  nicename String  @db.VarChar(80)
  User     User[]

  @@map("countries")
}

model Log {
  id         Int      @id @default(autoincrement())
  route      String
  method     Method
  auth_token String?  @db.MediumText
  ip         String   @db.VarChar(64)
  query      String?  @db.Text
  body       String?  @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@map("logs")
}

enum AnimeSeason {
  Winter
  Springs
  Summer
  Fall
}

enum AnimeType {
  TV
  Movie
  OAV
  ONA
  OVA
  special
  music
}

enum AnimeStatus {
  finished
  current
  unreleased
  tba
  upcoming
}

enum AnimeUserStatus {
  Wanted
  Watching
  Completed
  OnHold
  Droped
}

enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum Gender {
  Male
  Female
  Secret
}
