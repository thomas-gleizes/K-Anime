generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anime {
  id              Int          @id @default(autoincrement()) @db.UnsignedInt
  kitsuId         Int?         @unique @map("kitsu_id") @db.UnsignedInt
  slug            String       @unique
  canonicalTitle  String       @map("canonical_title")
  titles          String?      @db.LongText
  synopsis        String?      @db.Text
  description     String?      @db.Text
  season          AnimeSeason?
  seasonYear      String?      @map("season_year") @db.VarChar(4)
  dateBegin       DateTime?    @map("date_begin") @db.Date
  dateEnd         DateTime?    @map("date_end") @db.Date
  ratingAverage   Float?       @map("rating_average") @db.Float
  ratingRank      Int?         @map("rating_rank") @db.UnsignedInt
  popularityCount Int?         @map("popularity_count") @db.UnsignedInt
  popularityRank  Int?         @map("popularity_rank") @db.UnsignedInt
  type            AnimeType?
  poster          String?      @db.LongText
  cover           String?      @db.LongText
  episodeCount    Int?         @map("episode_count") @db.UnsignedInt
  episodeLength   Int?         @map("episode_length") @db.UnsignedInt
  status          AnimeStatus  @default(unreleased)
  sagaId          Int?         @map("saga_id") @db.UnsignedInt
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime     @default(now()) @map("updated_at") @db.Timestamp(0)

  entries    Entry[]
  posts      Post[]
  saga       Saga?           @relation(fields: [sagaId], references: [id])
  categories AnimeCategory[]
  import     AnimeImport?

  @@index([canonicalTitle], map: "animes_canonical_title_index")
  @@map("animes")
}

model Saga {
  id             Int      @id @default(autoincrement()) @db.UnsignedInt
  slug           String   @unique
  canonicalTitle String   @map("canonical_title")
  titles         String?  @db.LongText
  description    String?  @db.Text
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt      DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  animes Anime[]

  @@map("sagas")
}

model Category {
  id              Int      @id @default(autoincrement()) @db.UnsignedInt
  name            String
  slug            String   @unique
  description     String?  @db.Text
  totalMediaCount Int      @default(0) @map("total_media_count") @db.SmallInt
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  animes AnimeCategory[]

  @@map("categories")
}

model AnimeCategory {
  animeId    Int      @map("anime_id") @db.UnsignedInt
  categoryId Int      @map("category_id") @db.UnsignedInt
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  animes   Anime    @relation(fields: [animeId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([animeId, categoryId])
  @@map("animes_categories")
}

model User {
  id                   Int        @id @default(autoincrement()) @db.UnsignedInt
  username             String     @unique
  slug                 String     @unique
  email                String     @unique
  password             String
  avatarPath           String?    @map("avatar_path") @db.VarChar(255)
  backgroundPath       String?    @map("background_path") @db.VarChar(255)
  bio                  String?    @db.Text
  birthday             DateTime?  @db.Date
  gender               Gender     @default(Secret)
  city                 String?
  countryId            Int?       @map("country_id") @db.UnsignedInt
  realEmail            String     @unique @map("real_email")
  emailVerified        Boolean    @default(false) @map("email_verified")
  resetPasswordToken   String?    @map("reset_password_token") @db.VarChar(255)
  lastAskResetPassword DateTime?  @map("last_ask_reset_password")
  lastResetPassword    DateTime   @default(now()) @map("last_reset_password")
  followCount          Int        @default(0) @map("follow_count") @db.UnsignedInt
  followerCount        Int        @default(0) @map("follower_count") @db.UnsignedInt
  visibility           Visibility @default(public)
  isAdmin              Boolean    @default(false) @map("is_admin")
  createdAt            DateTime   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt            DateTime   @default(now()) @map("updated_at") @db.Timestamp(0)

  animes    Entry[]
  posts     Post[]
  follows   UserFollow[] @relation("follows")
  followers UserFollow[] @relation("followers")
  country   Country?     @relation(fields: [countryId], references: [id])
  log       Log[]

  @@map("users")
}

model Entry {
  id         Int         @id @default(autoincrement()) @db.UnsignedInt
  animeId    Int         @map("anime_id") @db.UnsignedInt
  userId     Int         @map("user_id") @db.UnsignedInt
  status     EntryStatus @default(Wanted)
  rating     Float?
  progress   Int         @default(0) @db.UnsignedSmallInt
  favorite   Boolean     @default(false)
  startedAt  DateTime?   @map("started_at") @db.Date
  finishAt   DateTime?   @map("finish_at") @db.Date
  note       String?     @db.MediumText
  visibility Visibility  @default(public)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime    @default(now()) @map("updated_at") @db.Timestamp(0)

  anime Anime @relation(fields: [animeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([animeId, userId])
  @@map("entries")
}

model Post {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  content     String   @db.Text
  attachments String?  @db.Text
  animeId     Int      @map("anime_id") @db.UnsignedInt
  userId      Int      @map("user_id") @db.UnsignedInt
  parentId    Int?     @map("parent_id") @db.UnsignedInt
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  anime   Anime  @relation(fields: [animeId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  replyTo Post?  @relation("parent", fields: [parentId], references: [id])
  replies Post[] @relation("parent")

  @@map("posts")
}

model UserFollow {
  followerId Int      @map("follower_id") @db.UnsignedInt
  followId   Int      @map("follow_id") @db.UnsignedInt
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  follower User @relation("follows", fields: [followerId], references: [id])
  follow   User @relation("followers", fields: [followId], references: [id])

  @@id([followerId, followId])
  @@map("users_follows")
}

model Country {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  iso       String   @db.Char(2)
  iso3      String?  @db.VarChar(3)
  name      String   @db.VarChar(80)
  nicename  String   @db.VarChar(80)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  users User[]

  @@map("countries")
}

model Log {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  path      String
  method    Method
  userId    Int?     @map("user_id") @db.UnsignedInt
  ip        String   @db.VarChar(64)
  params    String?  @db.Text
  body      String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  user User? @relation(fields: [userId], references: [id])

  @@map("logs")
}

model EventLog {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  @@map("event_logs")
}

model AnimeImport {
  id              Int       @id @default(autoincrement()) @db.UnsignedInt
  animeId         Int?      @unique @map("anime_id") @db.UnsignedInt
  kitsuId         Int       @unique @map("kitsu_id") @db.UnsignedInt
  slug            String
  canonicalTitle  String    @map("canonical_title") @db.VarChar(255)
  titles          String?   @db.LongText
  synopsis        String?   @db.Text
  description     String?   @db.Text
  dateBegin       DateTime? @map("date_begin") @db.Date
  dateEnd         DateTime? @map("date_end") @db.Date
  ratingAverage   Float?    @map("rating_average")
  ratingRank      Int?      @map("rating_rank") @db.UnsignedInt
  popularityCount Float?    @map("popularity_count")
  popularityRank  Int?      @map("popularity_rank") @db.UnsignedInt
  type            String?
  poster          String?   @db.LongText
  cover           String?   @db.LongText
  episodeCount    Int?      @map("episode_count") @db.UnsignedInt
  episodeLength   Int?      @map("episode_length") @db.UnsignedInt
  status          String?
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime  @default(now()) @map("updated_at") @db.Timestamp(0)

  anime      Anime?      @relation(fields: [animeId], references: [id])
  sagaImport SagaImport?

  @@map("import_animes")
}

model SagaImport {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  importId  Int      @unique @map("import_id") @db.UnsignedInt
  details   String   @db.LongText
  treat     Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp(0)

  import AnimeImport @relation(fields: [importId], references: [id])

  @@map("import_sagas")
}

enum AnimeSeason {
  Winter
  Springs
  Summer
  Fall
}

enum AnimeType {
  TV
  movie
  OAV
  ONA
  OVA
  special
  music
}

enum AnimeStatus {
  finished
  current
  unreleased
  tba
  upcoming
}

enum EntryStatus {
  Wanted
  Watching
  Completed
  OnHold
  Dropped
}

enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
}

enum Gender {
  Male
  Female
  Secret
}

enum Visibility {
  private
  public
  limited
}
